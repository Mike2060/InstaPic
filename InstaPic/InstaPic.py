import functools

from flask import (Blueprint, flash, g, redirect, render_template, request,
                   session, url_for)
from flask import current_app
import requests
from . import db
import os

bp = Blueprint('InstaPic', __name__, url_prefix='/InstaPic')
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}
UPLOAD_FOLDER = '/Users/tianyouchan/Documents/InstaPic/InstaPic/static/img'

@bp.route('/login', methods={"GET", "POST"})
def login():
    # check whether the user logged in or not
    if not ('loggedin' in session):
        # check for post method and whether the all mandatory information is filled
        if request.method == 'POST' and request.form['password']!='' and request.form['username']!='':
            username = request.form['username']
            password = request.form['password']
            success = db.login(username, password)
            #login success or not
            if 'loggedin' in session:
                return redirect(url_for('InstaPic.index'))
            else:
                msg = success
                return render_template('login.html',msg=msg)
        # Not post
        elif request.method == "GET":
            return render_template('login.html',msg='')
        # Some information is blank
        else:
            msg = f"Please fill all the nesscary information"
            return render_template('login.html',msg=msg)
    else:
        return redirect(url_for('InstaPic.index'))

@bp.route('/logout', methods={"GET", "POST"})
def logout():
    if 'loggedin' in session:
        session.pop('loggedin')
    if 'username' in session:
        session.pop('username')
    return redirect(url_for('InstaPic.login'))

@bp.route('/registration', methods={"GET", "POST"})
def registration():
    #check whether the user logged in or not
    if not ('loggedin' in session):
        # check for post method and whether the all mandatory information is filled
        if request.method == 'POST' and request.form['password'] != '' and request.form['username']!='':
            username = request.form['username']
            password = request.form['password']
            success = db.regNewAccount(username, password)
            #login success or not
            if 'loggedin' in session:
                return redirect(url_for('InstaPic.index'))
            #only fail when the email is duplicated with some in database
            else:
                msg = success
                return render_template('registration.html',msg = msg)
        # Not post
        elif request.method == 'GET':
            return render_template('registration.html',msg='')
        # Some information is blank
        else:
            msg = 'Please fill all the information needed'
            return render_template('registration.html',msg = msg)
    else:
        return redirect(url_for('InstaPic.index'))

@bp.route('/index', methods={"GET", "POST"})
def index():
    #check whether the user logged in or not
    if ('loggedin' in session):
        images = db.loadCardList()
        return render_template('index.html',images = images)
    else:
        return render_template('login.html',msg='')

@bp.route('/upload', methods={"GET", "POST"})
def upload():
    #check whether the user logged in or not
    if ('loggedin' in session):
        if request.method == 'GET':
            return render_template('upload.html',msg='')
        else:
            # check whether the img in files
            if 'img' not in request.files:
                msg = str(request.files)
                return render_template('upload.html',msg=msg)
            # check whether the content is inside the img
            elif request.form['content'] == '':
                msg = 'content dont exist'
                return render_template('upload.html',msg=msg)
            else:
                file = request.files['img']
                # check whether the extention is allowed and the file existence
                if file and allowed_file(file.filename):
                    # get file extention
                    extention = os.path.splitext(file.filename)[1]
                    # insert db and get the final file name generated by db
                    app = current_app._get_current_object()
                    filename = str(db.upLoadImage(session['username'], request.form['content'], extention)) + extention
                    file.save(os.path.join(app.config['UPLOAD_FOLDER'],filename))
                return redirect(url_for('InstaPic.index'))

    else:
        return render_template('login.html',msg='')

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

if __name__ == '__main__':
    app.run(debug=True)
